name: Update README and Deploy to Gigalixir (Python)

on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 1,21 * *'

jobs:
  update-and-deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write

    steps:
      # --- 这是关键的修改 ---
      # 添加 fetch-depth: 0 来获取完整的 Git 历史记录
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 0 表示获取所有历史，禁用浅克隆

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Update README
        run: |
          echo "Last updated on $(date)" >> README.md

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          if [[ -z $(git status -s) ]]; then
            echo "No changes to commit. Skipping deployment."
            # 设置一个输出变量，以便后续步骤可以跳过
            echo "no_changes=true" >> $GITHUB_OUTPUT
          else
            git add README.md
            git commit -m "docs: auto-update README"
            git push
            echo "no_changes=false" >> $GITHUB_OUTPUT
          fi
        id: commit # 给这个步骤一个id，以便引用它的输出

      - name: Install and Configure Gigalixir CLI
        # 仅在有代码变更时运行此步骤
        if: steps.commit.outputs.no_changes == 'false'
        run: |
          pip3 install gigalixir --user
          echo "$(python3 -m site --user-base)/bin" >> $GITHUB_PATH

      - name: Login and Deploy to Gigalixir
        # 仅在有代码变更时运行此步骤
        if: steps.commit.outputs.no_changes == 'false'
        env:
          GIGALIXIR_USERNAME: ${{ secrets.GIGALIXIR_USERNAME }}
          GIGALIXIR_PASSWORD: ${{ secrets.GIGALIXIR_PASSWORD }}
        run: |
          gigalixir login -e "$GIGALIXIR_USERNAME" -p "$GIGALIXIR_PASSWORD"
          gigalixir git:remote nz2 # 确保 'nz2' 是你的 App 名称
          git push -f gigalixir HEAD:master
